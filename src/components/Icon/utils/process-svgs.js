import { readdir, readFile, writeFile } from 'fs/promises';
import { join, extname } from 'path';

const rootDir = './src/components/Icon/utils';
const svgSourceDir = `${rootDir}/svgsSource`;
const svgDestDir = `${rootDir}/svgsDest`;

const iconNames = [];

try {
	const files = await readdir(svgSourceDir);

	for (const file of files) {
		if (extname(file) === '.svg') {
			const iconName = file.replace('.svg', '');
			iconNames.push(iconName);

			const filePath = join(svgSourceDir, file);

			// Read SVG content
			const data = await readFile(filePath, 'utf8');

			// Remove fill and stroke attributes
			const processedContent = data
				.replace(/fill="[^"]*"/g, '')
				.replace(/stroke="[^"]*"/g, '');

			// Write to destination file
			await writeFile(join(svgDestDir, file), processedContent, 'utf8');
			console.log(`Processed ${file}`);
		}
	}

	// Generate types file with both type and const object
	const typesContent = `// Generated by process-svgs.js
export type IconNamesList = '${iconNames.join("' | '")}';

export const IconNames = {
  ${iconNames.map(name => `'${name}': '${name}'`).join(',\n  ')}
} as const;
`;

	await writeFile(join(rootDir, 'icons.d.ts'), typesContent, 'utf8');
	console.log('-------------------\nGenerated icons.d.ts');

} catch (err) {
	console.error('Error processing SVG files:', err);
	process.exit(1);
}